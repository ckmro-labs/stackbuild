// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/laidingqing/stackbuild/core (interfaces: StageStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	core "github.com/laidingqing/stackbuild/core"
	reflect "reflect"
)

// MockStageStore is a mock of StageStore interface
type MockStageStore struct {
	ctrl     *gomock.Controller
	recorder *MockStageStoreMockRecorder
}

// MockStageStoreMockRecorder is the mock recorder for MockStageStore
type MockStageStoreMockRecorder struct {
	mock *MockStageStore
}

// NewMockStageStore creates a new mock instance
func NewMockStageStore(ctrl *gomock.Controller) *MockStageStore {
	mock := &MockStageStore{ctrl: ctrl}
	mock.recorder = &MockStageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStageStore) EXPECT() *MockStageStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStageStore) Create(arg0 context.Context, arg1 *core.Stage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStageStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStageStore)(nil).Create), arg0, arg1)
}

// Find mocks base method
func (m *MockStageStore) Find(arg0 context.Context, arg1 int64) (*core.Stage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*core.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockStageStoreMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockStageStore)(nil).Find), arg0, arg1)
}

// ListIncomplete mocks base method
func (m *MockStageStore) ListIncomplete(arg0 context.Context) ([]*core.Stage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomplete", arg0)
	ret0, _ := ret[0].([]*core.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomplete indicates an expected call of ListIncomplete
func (mr *MockStageStoreMockRecorder) ListIncomplete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomplete", reflect.TypeOf((*MockStageStore)(nil).ListIncomplete), arg0)
}
